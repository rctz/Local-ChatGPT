name: Pylint

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          pip install -r requirements.txt

      - name: Analyze code with pylint
        run: |
          pylint $(git ls-files '*.py') > pylint-output.txt || echo "Pylint failed with error code $?"
        continue-on-error: true

      - name: Save Pylint output as artifact
        uses: actions/upload-artifact@v2
        with:
          name: pylint-output
          path: pylint-output.txt

      - name: Extract Pylint score
        id: extract-pylint-score
        run: |
          pylint_score=$(cat pylint-output.txt | grep -oP '(?<=Your\scode\shas\sgotten\s)[0-9]+(?:\.[0-9]*)?')
          echo "::set-output name=pylint_score::$pylint_score"

      - name: Post comment in PR with Pylint score and artifact link
        if: success()
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, GitHub } = require('@actions/github');
            const github = new GitHub(process.env.GITHUB_TOKEN);
            const comment = `Pylint score for this PR: ${process.env.pylint_score}\nArtifact: [Download pylint-output.txt](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }}/artifacts/download)`;
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
